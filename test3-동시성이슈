[문제상황]
3. 예약 처리 프로세스와 데이터 모델에서 발생하고 있는 동시성 이슈의 해결 방안 제시

[요구사항 분석]
프롬프트
A고객사 주문시스템의 예약 처리 프로세스와 데이터 모델에서 동시성 문제가 발생하고 있는데, 예상되는 현상과 원인, 개선방향, 기대효과를 정리해줘.
기대효과는 사용자 편의성, 개발자 개발생산성, 운영자 운영 안정성 측면으로 작성해줘.

----------------

### 예상되는 현상
1. **데이터 불일치**: 여러 사용자가 동시에 데이터를 수정할 때, 데이터가 일관되지 않게 저장될 수 있습니다.
2. **예약 중복**: 동일한 시간대에 여러 예약이 중복으로 생성될 수 있습니다.
3. **성능 저하**: 동시 접근으로 인해 시스템 응답 속도가 느려질 수 있습니다.
4. **데드락(교착 상태)**: 여러 트랜잭션이 서로의 자원을 기다리며 무한 대기 상태에 빠질 수 있습니다.

### 원인
1. **락(Lock) 관리 미흡**: 데이터베이스나 애플리케이션 레벨에서 락을 적절히 관리하지 못할 경우 발생합니다.
2. **트랜잭션 격리 수준 부족**: 트랜잭션 격리 수준이 낮아 데이터 일관성이 보장되지 않을 수 있습니다.
3. **동시성 제어 미흡**: 동시성 제어 메커니즘이 부족하거나 잘못 구현된 경우입니다.
4. **부적절한 데이터 모델링**: 데이터 모델이 동시성을 고려하지 않고 설계된 경우입니다.

### 개선방향
1. **락 메커니즘 강화**: 데이터베이스 락을 적절히 사용하여 동시성 문제를 방지합니다.
2. **트랜잭션 격리 수준 조정**: 트랜잭션 격리 수준을 높여 데이터 일관성을 보장합니다.
3. **동시성 제어 알고리즘 도입**: 낙관적 동시성 제어(Optimistic Concurrency Control)나 비관적 동시성 제어(Pessimistic Concurrency Control) 알고리즘을 도입합니다.
4. **데이터 모델 재설계**: 동시성을 고려한 데이터 모델로 재설계합니다.

### 기대효과
1. **사용자 편의성**
   - **신뢰성 향상**: 데이터 일관성이 보장되어 사용자 신뢰도가 높아집니다.
   - **응답 속도 개선**: 성능 최적화를 통해 빠른 응답 속도를 제공합니다.

2. **개발자 개발생산성**
   - **디버깅 시간 단축**: 동시성 문제로 인한 버그 발생이 줄어들어 디버깅 시간이 단축됩니다.
   - **코드 유지보수 용이**: 동시성 제어가 잘 구현된 시스템은 유지보수가 용이합니다.

3. **운영자 운영 안정성**
   - **시스템 안정성 향상**: 동시성 문제로 인한 시스템 장애가 줄어듭니다.
   - **운영 비용 절감**: 시스템 장애로 인한 운영 비용이 감소합니다.

---------------


[설계]
프롬프트
개선방향을 바탕으로 MS Azure 기반의 MSA 설계를 하려고 한다. 
동시성 문제 해결을 위한 솔루션을 아키텍처 관점으로 설치해야 할 솔루션과 선정이유를 정리해주고, 주요 설정 내용도 요약해줘. 
redis cache에 캐시/데이터만료정책/분산잠금은 동작 개념과 흐름을 추가로 설명 넣어줘.
그 아키텍처 기반으로 어플리케이션 개발 관점에서 frontend/backend/interface 구분해서 개발목록과 비즈니스 로직을 정리해줘. 
동시성 문제 해결을 위해 적용한 로직을 추가로 상세 설명을 넣어줘.
비즈니스 로직은 개발자가 충분히 이해할 수 있도록 구체적으로 설명 작성해줘
DB 개발 관점에서 설계내역도 정리해줘. 
마지막에는 사용자의 사용 순서에 맞춰 테스트 시나리오를 작성해주되, 시나리오별 Azure솔루션/frontend/backend/interface/DB 별로 동작순서와 처리로직을 처리흐름 순서에 맞게 정리해줘.

----------------------
### 아키텍처 관점에서 설치해야 할 솔루션과 선정 이유

1. **Azure Cosmos DB**
   - **선정 이유**: 글로벌 분산 데이터베이스로, 높은 가용성과 확장성을 제공합니다. 트랜잭션 격리 수준을 조정할 수 있어 동시성 문제를 효과적으로 해결할 수 있습니다.
   - **주요 설정**: 파티션 키 설정, TTL(Time to Live) 설정, 인덱싱 정책 설정.

2. **Azure Redis Cache**
   - **선정 이유**: 고속 데이터 액세스를 위한 캐시 솔루션으로, 분산 잠금 기능을 통해 동시성 문제를 해결할 수 있습니다.
   - **주요 설정**: 캐시 만료 정책, 데이터 만료 정책, 분산 잠금 설정.

3. **Azure Service Bus**
   - **선정 이유**: 메시지 브로커로, 비동기 메시징을 통해 시스템의 확장성과 안정성을 높입니다.
   - **주요 설정**: 큐 및 토픽 설정, 메시지 TTL 설정, 재시도 정책 설정.

4. **Azure Kubernetes Service (AKS)**
   - **선정 이유**: 컨테이너 오케스트레이션을 통해 MSA 환경에서의 애플리케이션 배포와 관리를 용이하게 합니다.
   - **주요 설정**: 노드 풀 설정, 오토스케일링 설정, 네트워크 정책 설정.

### Redis Cache의 동작 개념과 흐름

1. **캐시**
   - **개념**: 자주 조회되는 데이터를 메모리에 저장하여 데이터베이스 접근을 최소화합니다.
   - **흐름**: 클라이언트 요청 → 캐시 조회 → (캐시 히트 시) 데이터 반환 → (캐시 미스 시) 데이터베이스 조회 후 캐시에 저장.

2. **데이터 만료 정책**
   - **개념**: 캐시에 저장된 데이터의 유효 기간을 설정하여 오래된 데이터를 자동으로 제거합니다.
   - **흐름**: 데이터 저장 시 TTL 설정 → TTL 만료 시 데이터 자동 삭제.

3. **분산 잠금**
   - **개념**: 여러 인스턴스가 동일한 리소스에 접근할 때, 분산 잠금을 통해 동시성 문제를 방지합니다.
   - **흐름**: 잠금 요청 → 잠금 획득 → 작업 수행 → 잠금 해제.

### 어플리케이션 개발 관점

#### Frontend
- **개발 목록**: 사용자 인터페이스(UI) 개발, 예약 화면, 예약 확인 화면.
- **비즈니스 로직**: 사용자 입력 검증, 예약 요청 전송, 예약 상태 표시.

#### Backend
- **개발 목록**: API 개발, 예약 처리 로직, 데이터베이스 연동.
- **비즈니스 로직**:
  - **예약 처리**: 예약 요청 수신 → 데이터베이스 트랜잭션 시작 → 예약 가능 여부 확인 → 예약 데이터 저장 → 트랜잭션 커밋.
  - **동시성 문제 해결 로직**: 
    - **비관적 잠금**: 예약 데이터에 대해 잠금을 설정하여 다른 트랜잭션이 접근하지 못하도록 합니다.
    - **낙관적 잠금**: 버전 번호를 사용하여 데이터 일관성을 유지합니다.

#### Interface
- **개발 목록**: API 게이트웨이 설정, 서비스 간 통신 설정.
- **비즈니스 로직**: 서비스 간 데이터 전달, 오류 처리, 로깅.

### DB 개발 관점

- **설계 내역**:
  - **테이블 구조**: 예약 테이블, 사용자 테이블, 로그 테이블.
  - **인덱스 설정**: 예약 시간, 사용자 ID에 대한 인덱스 설정.
  - **트랜잭션 관리**: 트랜잭션 격리 수준 설정, 트랜잭션 로그 관리.

### 테스트 시나리오

1. **예약 생성 시나리오**
   - **Azure 솔루션**: Azure Service Bus → Azure Cosmos DB
   - **Frontend**: 예약 요청 전송
   - **Backend**: 예약 가능 여부 확인 → 예약 데이터 저장
   - **Interface**: API 게이트웨이 → 예약 서비스 호출
   - **DB**: 예약 데이터 저장

2. **예약 확인 시나리오**
   - **Azure 솔루션**: Azure Redis Cache → Azure Cosmos DB
   - **Frontend**: 예약 상태 조회 요청
   - **Backend**: 캐시 조회 → (캐시 미스 시) 데이터베이스 조회 후 캐시에 저장
   - **Interface**: API 게이트웨이 → 예약 서비스 호출
   - **DB**: 예약 데이터 조회

3. **예약 취소 시나리오**
   - **Azure 솔루션**: Azure Service Bus → Azure Cosmos DB
   - **Frontend**: 예약 취소 요청 전송
   - **Backend**: 예약 데이터 삭제
   - **Interface**: API 게이트웨이 → 예약 서비스 호출
   - **DB**: 예약 데이터 삭제


