[요구사항]
1. A고객사 시스템의 채널 확대 및 사용자 증가에 따라 발생하는 인증 및 세션 관리 문제 해결을 위한 인증 방식 개선 방안

[요구사항 분석]
프롬프트(copilot)
A고객사 시스템의 채널 확대 및 사용자 증가에 따라 발생하는 인증 및 세션 관리 문제는 어떤 게 있는지 현상과 원인, 개선방향, 기대효과를 정리해줘.
기대효과는 사용자 편의성, 개발자 개발생산성, 운영자 운영 안정성 측면으로 작성해줘.
-------------------------
### 인증 및 세션 관리 문제

#### 현상
1. **인증 실패 증가**: 사용자 수가 증가하면서 인증 요청이 급증하고, 이로 인해 인증 실패율이 높아질 수 있습니다.
2. **세션 타임아웃 빈도 증가**: 많은 사용자가 동시에 접속하면 세션 타임아웃이 빈번하게 발생할 수 있습니다.
3. **세션 하이재킹**: 세션 관리가 허술할 경우, 공격자가 세션을 탈취하여 사용자 권한을 획득할 수 있습니다¹.

#### 원인
1. **부적절한 인증 메커니즘**: 단순한 인증 방식은 많은 사용자를 처리하는 데 한계가 있습니다.
2. **세션 관리 미흡**: 세션 타임아웃 설정이 적절하지 않거나, 세션 저장소의 용량이 부족할 수 있습니다.
3. **보안 취약점**: 세션 하이재킹, 크로스 사이트 스크립팅(XSS) 등의 보안 취약점이 존재할 수 있습니다².

### 개선방향
1. **강화된 인증 메커니즘 도입**: 다중 요소 인증(MFA) 등을 도입하여 인증의 신뢰성을 높입니다.
2. **세션 관리 최적화**: 세션 타임아웃 설정을 최적화하고, 세션 저장소의 용량을 확장합니다.
3. **보안 강화**: 보안 취약점을 주기적으로 점검하고, 최신 보안 패치를 적용합니다³.

### 기대효과

#### 사용자 편의성
- **인증 신뢰성 향상**: 강화된 인증 메커니즘을 통해 인증 실패율이 감소하여 사용자 경험이 개선됩니다.
- **세션 안정성 증가**: 세션 타임아웃 빈도가 줄어들어 사용자가 더 오랜 시간 동안 안정적으로 서비스를 이용할 수 있습니다.

#### 개발자 개발생산성
- **코드 품질 향상**: 보안 강화와 세션 관리 최적화를 통해 코드의 안정성과 품질이 향상됩니다.
- **개발 효율성 증가**: 표준화된 인증 및 세션 관리 방식을 도입함으로써 개발 과정이 간소화되고, 유지보수가 용이해집니다.

#### 운영자 운영 안정성
- **보안 강화**: 세션 하이재킹 등의 보안 위협이 감소하여 시스템의 전반적인 보안 수준이 향상됩니다.
- **운영 효율성 증가**: 세션 관리 최적화와 모니터링 도구의 도입으로 운영자가 시스템 상태를 쉽게 파악하고, 문제를 신속히 해결할 수 있습니다.
---------------------------

[설계]
프롬프트(copilot)
개선방향을 바탕으로 MS Azure 기반의 MSA 설계를 하려고 한다. 
아키텍처 관점으로 설치해야 할 솔루션과 선정이유를 정리해주고, 주요 설정 내용도 요약해줘. 
아키텍처에 개발 배포를 위한 CI/CD도 고려해서 솔루션 추가로 넣어줘.
그 아키텍처 기반으로 어플리케이션 개발 관점에서 frontend/backend/interface 구분해서 개발목록과 비즈니스 로직을 정리해줘. 
비즈니스 로직은 개발자가 충분히 이해할 수 있도록 구체적으로 설명 작성해줘
DB 개발 관점에서 설계내역도 정리해줘. 
마지막에는 사용자의 사용 순서에 맞춰 테스트 시나리오를 작성해주되, 시나리오별 Azure솔루션/frontend/backend/interface/DB 별로 동작순서와 처리로직을 처리흐름 순서에 맞게 정리해줘.

-----------------------
### MS Azure 기반의 MSA 설계

#### 아키텍처 관점에서 설치해야 할 솔루션과 선정 이유

1. **Azure Kubernetes Service (AKS)**
   - **선정 이유**: 컨테이너화된 애플리케이션을 쉽게 배포, 관리할 수 있으며, 자동 확장 및 자가 치유 기능을 제공합니다¹.
   - **주요 설정**: 클러스터 구성, 노드 풀 설정, 네트워크 정책 설정.

2. **Azure API Management**
   - **선정 이유**: API 게이트웨이 역할을 하여 클라이언트와 백엔드 서비스 간의 통신을 관리하고 보안을 강화합니다².
   - **주요 설정**: API 정의, 정책 설정(인증, 캐싱, 로깅 등).

3. **Azure Active Directory (AAD)**
   - **선정 이유**: 사용자 인증 및 권한 관리를 중앙 집중화하여 보안을 강화합니다³.
   - **주요 설정**: 사용자 및 그룹 관리, 애플리케이션 등록, 인증 정책 설정.

4. **Azure Cosmos DB**
   - **선정 이유**: 글로벌 분산 데이터베이스로, 높은 가용성과 확장성을 제공합니다⁴.
   - **주요 설정**: 데이터베이스 및 컨테이너 생성, 파티션 키 설정, 인덱싱 정책 설정.

5. **Azure Monitor**
   - **선정 이유**: 애플리케이션 및 인프라의 모니터링과 로그 분석을 통해 문제를 신속히 파악하고 해결할 수 있습니다⁵.
   - **주요 설정**: 로그 수집, 경고 규칙 설정, 대시보드 구성.

6. **Azure DevOps**
   - **선정 이유**: CI/CD 파이프라인을 통해 코드 변경 사항을 자동으로 빌드, 테스트, 배포할 수 있습니다⁶.
   - **주요 설정**: 빌드 파이프라인 구성, 릴리스 파이프라인 설정, 자동화된 테스트 및 배포 스크립트 작성.

### 어플리케이션 개발 관점

#### Frontend
- **개발 목록**: 사용자 인터페이스(UI) 개발, 사용자 인증 및 권한 관리, API 호출 및 데이터 표시.
- **비즈니스 로직**:
  - **사용자 로그인/로그아웃**: 사용자가 로그인 폼에 아이디와 비밀번호를 입력하면, 입력된 데이터를 백엔드로 전송합니다. 백엔드에서 인증이 성공하면, 사용자 세션을 생성하고, 사용자 대시보드로 리디렉션합니다. 로그아웃 시에는 세션을 종료하고 로그인 페이지로 리디렉션합니다.
  - **데이터 입력 및 조회**: 사용자가 입력 폼에 데이터를 입력하고 제출 버튼을 클릭하면, 입력된 데이터를 백엔드로 전송합니다. 백엔드에서 데이터 검증 후 데이터베이스에 저장하고, 성공 메시지를 반환합니다. 조회 요청 시에는 백엔드에서 데이터베이스를 조회하고, 조회된 데이터를 프론트엔드로 반환하여 화면에 표시합니다.
  - **알림 표시**: 백엔드에서 특정 이벤트가 발생하면, 프론트엔드로 실시간 알림을 전송합니다. 프론트엔드는 알림을 사용자 인터페이스에 표시합니다.

#### Backend
- **개발 목록**: API 개발, 비즈니스 로직 구현, 데이터베이스 연동.
- **비즈니스 로직**:
  - **사용자 인증 처리**: 프론트엔드에서 전송된 아이디와 비밀번호를 검증합니다. 검증이 성공하면, 사용자 세션을 생성하고, 인증 토큰을 반환합니다. 로그아웃 요청 시에는 사용자 세션을 종료하고, 로그아웃 결과를 반환합니다.
  - **데이터 검증 및 저장**: 프론트엔드에서 전송된 데이터를 검증합니다. 필수 필드가 모두 입력되었는지, 데이터 형식이 올바른지 등을 확인합니다. 검증이 성공하면, 데이터를 데이터베이스에 저장하고, 저장 결과를 프론트엔드로 반환합니다.
  - **비즈니스 규칙 적용**: 특정 조건에 따라 비즈니스 로직을 적용합니다. 예를 들어, 사용자의 권한에 따라 접근 가능한 데이터 범위를 제한하거나, 특정 이벤트 발생 시 알림을 전송합니다.

#### Interface
- **개발 목록**: API 게이트웨이 설정, 서비스 간 통신 관리, 메시지 큐 설정.
- **비즈니스 로직**:
  - **API 요청 라우팅**: 프론트엔드에서 전송된 API 요청을 적절한 백엔드 서비스로 라우팅합니다. 예를 들어, 인증 요청은 인증 서비스로, 데이터 조회 요청은 데이터 서비스로 라우팅합니다.
  - **서비스 간 데이터 전달**: 서비스 간 데이터 전달을 관리하고, 오류 발생 시 재시도 로직을 구현합니다.

### DB 개발 관점

#### 설계 내역
- **데이터 모델링**: 사용자, 세션, 로그, 트랜잭션 등의 테이블 설계.
- **인덱스 설정**: 자주 조회되는 컬럼에 인덱스 설정.
- **파티셔닝**: 대용량 데이터를 효율적으로 관리하기 위한 파티셔닝 전략 수립.
- **백업 및 복구**: 정기적인 백업 설정 및 복구 계획 수립.

### 테스트 시나리오

#### 사용자 사용 순서에 따른 테스트 시나리오

1. **사용자 로그인**
   - **Azure 솔루션**: Azure Active Directory (AAD)
   - **Frontend**: 로그인 화면에서 사용자 입력 처리.
   - **Backend**: 사용자 인증 요청 처리.
   - **Interface**: API 게이트웨이를 통해 인증 서비스 호출.
   - **DB**: 사용자 정보 조회 및 인증 결과 반환.

2. **데이터 조회**
   - **Azure 솔루션**: Azure API Management, Azure Cosmos DB
   - **Frontend**: 조회 요청 전송 및 결과 표시.
   - **Backend**: 데이터 조회 요청 처리.
   - **Interface**: API 게이트웨이를 통해 데이터 서비스 호출.
   - **DB**: 데이터 조회 및 결과 반환.

3. **데이터 입력**
   - **Azure 솔루션**: Azure API Management, Azure Cosmos DB
   - **Frontend**: 입력 폼에서 사용자 입력 처리.
   - **Backend**: 데이터 검증 및 저장 요청 처리.
   - **Interface**: API 게이트웨이를 통해 데이터 서비스 호출.
   - **DB**: 데이터 저장 및 결과 반환.

4. **로그아웃**
   - **Azure 솔루션**: Azure Active Directory (AAD)
   - **Frontend**: 로그아웃 요청 전송.
   - **Backend**: 세션 종료 요청 처리.
   - **Interface**: API 게이트웨이를 통해 세션 서비스 호출.
   - **DB**: 세션 정보 삭제 및 결과 반환.
